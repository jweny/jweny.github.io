<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tomcat 内存马检测</title>
    <link href="/2020/10/13/Tomcat%20%E5%86%85%E5%AD%98%E9%A9%AC%E6%A3%80%E6%B5%8B/"/>
    <url>/2020/10/13/Tomcat%20%E5%86%85%E5%AD%98%E9%A9%AC%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-内存马检测"><a href="#Tomcat-内存马检测" class="headerlink" title="Tomcat 内存马检测"></a>Tomcat 内存马检测</h1><p>随着HW、攻防对抗的强度越来越高，各大厂商对于webshell的检测技术愈发成熟，对于攻击方来说，传统的文件落地webshell的生存空间越来越小，无文件webshell已经逐步成为新的研究趋势。</p><p>三月底针对tomcat内存马的检测写了一个demo，但由于对Maven打包理解不深，整个项目结构比较糟糕。</p><p>国庆前偶然发现LandGrey师傅的<a href="https://github.com/LandGrey/copagent">copagent项目</a>，在该项目基础上进行了重构，并于本文中记录了检测思路，以及部分代码demo。</p><p>作者： jweny @360云安全</p><h2 id="0x01-Java内存马简介"><a href="#0x01-Java内存马简介" class="headerlink" title="0x01 Java内存马简介"></a>0x01 Java内存马简介</h2><p>关于JAVA内存马的发展历史，这里引用下 <a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/">c0ny1师傅的总结</a> 。早在17年n1nty师傅的<a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">《Tomcat源码调试笔记-看不见的shell》</a>中已初见端倪，但一直不温不火。后经过rebeyong师傅使用<a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/(https://www.cnblogs.com/rebeyond/p/9686213.html)">agent技术</a>加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。特别是今年在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的<a href="https://landgrey.me/blog/12/">Spring controller内存马</a>。</p><p>从攻击对象来说，可以将Java内存马分为以下几类：</p><ol><li>servlet-api<ul><li><a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">filter型</a></li><li><a href="https://www.cnblogs.com/potatsoSec/p/13195183.html">servlet型</a></li><li><a href="https://www.anquanke.com/post/id/214483#h3-5">listener型</a></li></ul></li><li>指定框架，如<a href="https://landgrey.me/blog/12/">spring</a></li><li><a href="https://www.cnblogs.com/rebeyond/p/9686213.html">字节码增强型</a></li><li><a href="https://mp.weixin.qq.com/s/1ZiLD396088TxiW_dUOFsQ">任意JSP文件隐藏</a></li></ol><p>为方便学习，webshell demo已整理至<a href="https://github.com/jweny/MemShellDemo/tree/master/MemShellForJava">github</a>。</p><h2 id="0x02-整体思路"><a href="#0x02-整体思路" class="headerlink" title="0x02 整体思路"></a>0x02 整体思路</h2><p>无论是以上哪种攻击方式，从防守方的角度来说，检测的方式都是通过java instrumentation机制，将检测jar包attach到tomcat jvm，检查加载到jvm中的类是否异常。</p><p>整体检测思路为：</p><ol><li>获取tomcat jvm中所有加载的类</li><li>遍历每个类，判断是否为风险类。我们把<strong>可能被攻击方新增/修改内存中的类，标记为风险类</strong>（比如实现了filter/servlet的类）</li><li>遍历风险类，检查是否为webshell：<ul><li>检查高风险类的class文件是否存在；</li><li>反编译风险类字节码，检查java文件中包含恶意代码</li></ul></li></ol><h2 id="0x03-获取jvm中所有加载的类"><a href="#0x03-获取jvm中所有加载的类" class="headerlink" title="0x03 获取jvm中所有加载的类"></a>0x03 获取jvm中所有加载的类</h2><ol><li><p>遍历java jvm，查找所有的tomcat jvm</p></li><li><p>通过java instrumentation，将agent attach到每个tomcat jvm。由于可能存在多个tomcat进程的场景，因此每个tomcat jvm均检测一遍</p><pre><code class="hljs java"><span class="hljs-comment">// 应对存在多个 tomcat 进程的情况</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">(String agent_jar_path)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    VirtualMachine virtualMachine = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">for</span> (VirtualMachineDescriptor descriptor : VirtualMachine.list()) &#123;        <span class="hljs-keyword">if</span> (descriptor.displayName().contains(<span class="hljs-string">&quot;catalina&quot;</span>) || descriptor.displayName().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;            <span class="hljs-keyword">try</span> &#123;                virtualMachine = VirtualMachine.attach(descriptor);                Properties targetSystemProperties = virtualMachine.getSystemProperties();                <span class="hljs-keyword">if</span> (descriptor.displayName().equals(<span class="hljs-string">&quot;&quot;</span>) &amp;&amp; !targetSystemProperties.containsKey(<span class="hljs-string">&quot;catalina.home&quot;</span>))                    <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// 将当前tomcat descriptor，传到agent，作为检测结果的文件名。也是用来区分多个tomcat进程。</span>                String currentJvmName = <span class="hljs-string">&quot;tomcat_&quot;</span> + descriptor.id();                Thread.sleep(<span class="hljs-number">1000</span>);                javaInfoWarning(targetSystemProperties);                virtualMachine.loadAgent(agent_jar_path, currentJvmName);            &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;                t.printStackTrace();            &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-comment">// detach</span>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != virtualMachine)                    virtualMachine.detach();            &#125;        &#125;    &#125;&#125;</code></pre></li><li><p>遍历tomcat jvm 加载过的类</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">detectMemShell</span><span class="hljs-params">(String currentJvmName, Instrumentation ins)</span> </span>&#123;    <span class="hljs-comment">// 获取所有加载的类</span>    Class&lt;?&gt;[] loadedClasses = ins.getAllLoadedClasses();&#125;</code></pre></li></ol><h2 id="0x04-风险类识别"><a href="#0x04-风险类识别" class="headerlink" title="0x04 风险类识别"></a>0x04 风险类识别</h2><p>最理想的做法是把所有加载的类都认定为风险类。但在绝大多数情况下jvm加载的都是正常的类，每次检查时，都dump所有加载的类，对于tomcat（用户侧）来说开销较大。</p><p><strong>比较实际的做法是，根据已知内存马要新增/修改的类生成特征。</strong></p><p><strong>对于内存中的每一个类，递归检查其父类，然后将命中特征的类标记为风险类。</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Class&lt;?&gt;&gt; findAllSuspiciousClass (Instrumentation ins, Class&lt;?&gt;[] loadedClasses)&#123;    <span class="hljs-comment">// 结果</span>    List&lt;Class&lt;?&gt;&gt; suspiciousClassList = <span class="hljs-keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();    List&lt;String&gt; loadedClassesNames = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    <span class="hljs-comment">// 获取所有风险类</span>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; clazz : loadedClasses) &#123;        loadedClassesNames.add(clazz.getName());        <span class="hljs-comment">// 递归 检查class的父类 空或java.lang.Object退出</span>        <span class="hljs-keyword">while</span> (clazz != <span class="hljs-keyword">null</span> &amp;&amp; !clazz.getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;            <span class="hljs-keyword">if</span> (                    ClassUtils.lsContainRiskPackage(clazz) ||                            ClassUtils.isUseAnnotations(clazz) ||                            ClassUtils.lsHasRiskSuperClass(clazz) ||                            ClassUtils.lsRiskClassName(clazz) ||                            ClassUtils.lsReleaseRiskInterfaces(clazz)            )&#123;                <span class="hljs-keyword">if</span> (loadedClassesNames.contains(clazz.getName())) &#123;                    suspiciousClassList.add(clazz);                    ClassUtils.dumpClass(ins, clazz.getName(), <span class="hljs-keyword">false</span>,                            Integer.toHexString(clazz.getClassLoader().hashCode()));                    <span class="hljs-keyword">break</span>;                &#125;                LogUtils.logToFile(<span class="hljs-string">&quot;cannot find &quot;</span> + clazz.getName() + <span class="hljs-string">&quot; classes in instrumentation&quot;</span>);                <span class="hljs-keyword">break</span>;            &#125;            clazz = clazz.getSuperclass();        &#125;    &#125;    <span class="hljs-keyword">return</span> suspiciousClassList;&#125;</code></pre><p>这里借鉴了<a href="https://github.com/LandGrey/copagent">LandGrey师傅</a>的黑名单，将内存马的目标类的类名、继承类、实现类、所属的包、使用的注解均设置黑名单。</p><h3 id="1-实现类黑名单"><a href="#1-实现类黑名单" class="headerlink" title="1. 实现类黑名单"></a>1. 实现类黑名单</h3><p>检测类是否实现javax.servlet.Filter / javax.servlet.Servlet / javax.servlet.ServletRequestListener接口类。</p><pre><code class="hljs java"><span class="hljs-comment">// 检测类是否实现高风险接口，如servlet/filter/Listener</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">lsReleaseRiskInterfaces</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span></span>&#123;    <span class="hljs-comment">// 高风险的接口</span>    List&lt;String&gt; riskInterface = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    <span class="hljs-comment">// filter型</span>    riskInterface.add(<span class="hljs-string">&quot;javax.servlet.Filter&quot;</span>);    <span class="hljs-comment">// servlet型</span>    riskInterface.add(<span class="hljs-string">&quot;javax.servlet.Servlet&quot;</span>);    <span class="hljs-comment">// listener型</span>    riskInterface.add(<span class="hljs-string">&quot;javax.servlet.ServletRequestListener&quot;</span>);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">// 获取类实现的interface</span>        List&lt;String&gt; clazzInterfaces = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();        <span class="hljs-keyword">for</span> (Class&lt;?&gt; cls : clazz.getInterfaces())            clazzInterfaces.add(cls.getName());        <span class="hljs-comment">// 两个list有交集 返回true</span>        clazzInterfaces.retainAll(riskInterface);        <span class="hljs-keyword">if</span>(clazzInterfaces.size()&gt;<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> Boolean.TRUE;        &#125;    &#125; <span class="hljs-keyword">catch</span> (Throwable ignored) &#123;&#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre><h3 id="2-继承类黑名单"><a href="#2-继承类黑名单" class="headerlink" title="2. 继承类黑名单"></a>2. 继承类黑名单</h3><pre><code class="hljs java"><span class="hljs-comment">// 检测父类是否属于高风险</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">lsHasRiskSuperClass</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> </span>&#123;    <span class="hljs-comment">// 高风险的父类</span>    List&lt;String&gt; riskSuperClassesName = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    riskSuperClassesName.add(<span class="hljs-string">&quot;javax.servlet.http.HttpServlet&quot;</span>);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">if</span> ((clazz.getSuperclass() != <span class="hljs-keyword">null</span>                &amp;&amp; riskSuperClassesName.contains(clazz.getSuperclass().getName())        ))&#123;            <span class="hljs-keyword">return</span> Boolean.TRUE;        &#125;    &#125;<span class="hljs-keyword">catch</span> (Throwable ignored) &#123;&#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre><h3 id="3-注解黑名单"><a href="#3-注解黑名单" class="headerlink" title="3. 注解黑名单"></a>3. 注解黑名单</h3><p>通过clazz.getDeclaredAnnotations() 获取所有注解，如果类使用了spring注册路由的注解，则标记为高风险。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">isUseAnnotations</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> </span>&#123;    <span class="hljs-comment">// 针对spring注册路由的一些注解</span>    List&lt;String&gt; riskAnnotations = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.RestController&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.RequestMapping&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.GetMapping&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.PostMapping&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.PatchMapping&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.PutMapping&quot;</span>);    riskAnnotations.add(<span class="hljs-string">&quot;org.springframework.web.bind.annotation.Mapping&quot;</span>);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">// 获取所有注解</span>        Annotation[] da = clazz.getDeclaredAnnotations();        <span class="hljs-keyword">if</span> (da.length &gt; <span class="hljs-number">0</span>)            <span class="hljs-keyword">for</span> (Annotation _da : da) &#123;                <span class="hljs-comment">// 比较 注解 &amp;&amp; 高风险注解 如果有交集 返回True</span>                <span class="hljs-keyword">for</span> (String _annotation : riskAnnotations) &#123;                    <span class="hljs-keyword">if</span> (_da.annotationType().getName().equals(_annotation))                        <span class="hljs-keyword">return</span> Boolean.TRUE;                &#125;            &#125;    &#125; <span class="hljs-keyword">catch</span> (Throwable ignored) &#123;&#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre><h3 id="4-类名黑名单"><a href="#4-类名黑名单" class="headerlink" title="4. 类名黑名单"></a>4. 类名黑名单</h3><pre><code class="hljs java"><span class="hljs-comment">// 高风险的类名</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">lsRiskClassName</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span></span>&#123;    List&lt;String&gt; riskClassName = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    riskClassName.add(<span class="hljs-string">&quot;org.springframework.web.servlet.handler.AbstractHandlerMapping&quot;</span>);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">if</span> (riskClassName.contains(clazz.getName()))&#123;            <span class="hljs-keyword">return</span> Boolean.TRUE;        &#125;    &#125;<span class="hljs-keyword">catch</span> (Throwable ignored) &#123;&#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre><h3 id="5-包名黑名单"><a href="#5-包名黑名单" class="headerlink" title="5. 包名黑名单"></a>5. 包名黑名单</h3><pre><code class="hljs java"><span class="hljs-comment">// 检测是否属于高风险的包</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">lsContainRiskPackage</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span></span>&#123;    <span class="hljs-comment">// 高风险的包</span>    List&lt;String&gt; riskPackage = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    riskPackage.add(<span class="hljs-string">&quot;net.rebeyond.&quot;</span>);    riskPackage.add(<span class="hljs-string">&quot;com.metasploit.&quot;</span>);    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">for</span> (String packageName : riskPackage) &#123;            <span class="hljs-keyword">if</span> (clazz.getName().startsWith(packageName)) &#123;                <span class="hljs-keyword">return</span> Boolean.TRUE;            &#125;        &#125;    &#125;<span class="hljs-keyword">catch</span> (Throwable ignored) &#123;&#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre><h3 id="6-基于mbean的filter-servlet风险类识别"><a href="#6-基于mbean的filter-servlet风险类识别" class="headerlink" title="6. 基于mbean的filter/servlet风险类识别"></a>6. 基于mbean的filter/servlet风险类识别</h3><p>这里分享另一种filter/servlet的检测，检测思路是通过mbean获取sevlet/filter列表，内存马的filter是动态注册的，所以web.xml中肯定没有相应配置，因此通过对比可以发现异常的filter。</p><pre><code class="hljs java">MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();Object mbsInte = getFieldValue(mbs, <span class="hljs-string">&quot;mbsInterceptor&quot;</span>);Object repository = getFieldValue(mbsInte, <span class="hljs-string">&quot;repository&quot;</span>);Object domainTb = getFieldValue(repository, <span class="hljs-string">&quot;domainTb&quot;</span>);Map&lt;String, Object&gt; catlina = (Map&lt;String, Object&gt;)((Map&lt;String,Object&gt;)domainTb).get(<span class="hljs-string">&quot;Catalina&quot;</span>);<span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : catlina.entrySet()) &#123;  String key = entry.getKey();  <span class="hljs-comment">// servlet</span>  <span class="hljs-keyword">if</span> (key.contains(<span class="hljs-string">&quot;j2eeType=Servlet&quot;</span>))&#123;...&#125;  <span class="hljs-comment">// filter </span>  <span class="hljs-keyword">if</span> (key.contains(<span class="hljs-string">&quot;j2eeType=Servlet&quot;</span>) &amp;&amp; key.contains(<span class="hljs-string">&quot;name=jsp&quot;</span>))&#123;    Object value = entry.getValue();    Object obj = getFieldValue(value,<span class="hljs-string">&quot;object&quot;</span>);    Object res = getResourceValue(obj);    Object instance = getFieldValue(res,<span class="hljs-string">&quot;instance&quot;</span>);    Object rctxt = getFieldValue(instance, <span class="hljs-string">&quot;rctxt&quot;</span>);    Object context = getFieldValue(instance, <span class="hljs-string">&quot;context&quot;</span>);    Object appContext = getFieldValue(context,<span class="hljs-string">&quot;context&quot;</span>);    Object standardContext = getFieldValue(appContext,<span class="hljs-string">&quot;context&quot;</span>);    Object filterConfigs = getFieldValue(standardContext,<span class="hljs-string">&quot;filterConfigs&quot;</span>);    ...</code></pre><p>不过这种方式有较大的缺陷。首先，mbean只是资源管理，并不影响功能，所以在植入内存马后再卸载掉注册的mbean即可绕过；其次，servlet 3.0引入了 @WebFilter 可以动态注册，这种也没有在web.xml中配置，会引起误报，因此仅可作为一个查找风险类参考条件。</p><h2 id="0x05-检测是否为内存马"><a href="#0x05-检测是否为内存马" class="headerlink" title="0x05 检测是否为内存马"></a>0x05 检测是否为内存马</h2><p>遍历风险类，并检测以下规则：</p><ol><li><p>内存马，对应的ClassLoader目录下没有对应的class文件</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">checkClassIsNotExists</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span></span>&#123;    String className = clazz.getName();    String classNamePath = className.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-string">&quot;.class&quot;</span>;    URL isExists = clazz.getClassLoader().getResource(classNamePath);    <span class="hljs-keyword">if</span> (isExists == <span class="hljs-keyword">null</span>)&#123;        <span class="hljs-keyword">return</span> Boolean.TRUE;    &#125;    <span class="hljs-keyword">return</span> Boolean.FALSE;&#125;</code></pre></li><li><p>反编译该类的字节码，检查是否存在危险函数</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">checkFileContentIsRisk</span><span class="hljs-params">(File dumpPath)</span></span>&#123;    List&lt;String&gt; riskKeyword = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();    riskKeyword.add(<span class="hljs-string">&quot;javax.crypto.&quot;</span>);    riskKeyword.add(<span class="hljs-string">&quot;ProcessBuilder&quot;</span>);    riskKeyword.add(<span class="hljs-string">&quot;getRuntime&quot;</span>);    riskKeyword.add(<span class="hljs-string">&quot;ProcessImpl&quot;</span>);    riskKeyword.add(<span class="hljs-string">&quot;shell&quot;</span>);    String content = PathUtils.getFileContent(dumpPath);    <span class="hljs-keyword">for</span> (String keyword : riskKeyword) &#123;        <span class="hljs-keyword">if</span> (content.contains(keyword)) &#123;            <span class="hljs-keyword">return</span> Boolean.TRUE;        &#125;    &#125;</code></pre><p>结果输出参考：如果没有class文件，可将该类风险等级标为high。如果包含恶意代码，将该类风险等级调至最高级。</p><pre><code class="hljs java"><span class="hljs-comment">// 输出结果</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getClassRiskLevel</span><span class="hljs-params">(Class&lt;?&gt; clazz, File dumpPath)</span> </span>&#123;    String riskLevel = <span class="hljs-string">&quot;Low&quot;</span>;    <span class="hljs-comment">// 检测 Classloader目录下是否存在class文件</span>    <span class="hljs-keyword">if</span> (AnalysisUtils.checkClassIsNotExists(clazz))&#123;        riskLevel = <span class="hljs-string">&quot;high&quot;</span>;    &#125;    <span class="hljs-comment">// 反编译  检测java文件是否包含执行命令的危险函数</span>    <span class="hljs-keyword">if</span> (AnalysisUtils.checkFileContentIsRisk(dumpPath))&#123;        riskLevel = <span class="hljs-string">&quot;Absolutely&quot;</span>;    &#125;    <span class="hljs-keyword">return</span> riskLevel;&#125;</code></pre></li></ol><h2 id="0x06-小结"><a href="#0x06-小结" class="headerlink" title="0x06 小结"></a>0x06 小结</h2><p>本文只是对Tomcat内存马的检测提供了一些思路，但并未提及查杀，查杀将在下一篇分享。</p><p>以上所有方法的黑名单列表仅供参考，可自行更改。</p><p>感谢 <strong>fnmsd、c0ny1、LandGrey</strong> 师傅们的支持。</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></li><li><a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/">查杀Java web filter型内存马</a></li><li><a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat源码调试笔记-看不见的shell</a></li><li><a href="https://www.cnblogs.com/rebeyond/p/9686213.html">【原创】利用“进程注入”实现无文件不死webshell</a></li><li><a href="https://landgrey.me/blog/12/">基于内存 Webshell 的无文件攻击技术研究</a></li><li><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于语义分析的Jsonp劫持检测</title>
    <link href="/2020/08/29/%E5%9F%BA%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90%E7%9A%84Jsonp%E5%8A%AB%E6%8C%81%E6%A3%80%E6%B5%8B/"/>
    <url>/2020/08/29/%E5%9F%BA%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90%E7%9A%84Jsonp%E5%8A%AB%E6%8C%81%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基于AST的JSONP劫持漏洞检测"><a href="#基于AST的JSONP劫持漏洞检测" class="headerlink" title="基于AST的JSONP劫持漏洞检测"></a>基于AST的JSONP劫持漏洞检测</h1><h2 id="0x00-JSONP劫持简介"><a href="#0x00-JSONP劫持简介" class="headerlink" title="0x00 JSONP劫持简介"></a><strong>0x00 JSONP劫持简介</strong></h2><ul><li>敏感信息泄露引发的精准诈骗。</li><li>防守方的溯源能力之一，获取攻击者画像。</li></ul><h2 id="0x01-基于AST的JSONP劫持检测"><a href="#0x01-基于AST的JSONP劫持检测" class="headerlink" title="0x01 基于AST的JSONP劫持检测"></a><strong>0x01 基于AST的JSONP劫持检测</strong></h2><p>检测思路来源于xray核心开发者Koalr师傅  <a href="https://koalr.me/post/a-tour-of-xray/">https://koalr.me/post/a-tour-of-xray/</a> 的分享。</p><p>在 AST 层面的统一和一致，给我们的分析过程带来了极大的遍历，使我们可以很轻易的解决下面几种 case</p><pre><code class="hljs js">callback(&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xray&quot;</span>&#125;);callback(&#123;<span class="hljs-string">&quot;data&quot;</span>: &#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;xray&quot;</span>&#125;&#125;);<span class="hljs-comment">/*aa*/</span> <span class="hljs-built_in">window</span>.cb &amp;&amp; <span class="hljs-built_in">window</span>.cb(&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xray&quot;</span>&#125;)callback([&#123;<span class="hljs-string">&quot;info&quot;</span>: &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;array&quot;</span>&#125;&#125;])cb(<span class="hljs-string">&#x27;  &#123;&quot;username&quot;:&quot;xray&quot;&#125;  &#x27;</span>)a=&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;xray&quot;</span>&#125;; cb(&#123;<span class="hljs-string">&quot;s&quot;</span>: a&#125;)</code></pre><p>至此 jsonp 的检测可以说找到了一种相对完美的解决方案，误报的数量处于完全可接受的状态，漏报一般丰富一下敏感信息关键字就可以解决，jsonp 的介绍到此为止。</p><p>我通过golang实现了一版，感兴趣的可以看下：<a href="https://github.com/jweny/check_jsonp_based_on_ast">https://github.com/jweny/check_jsonp_based_on_ast</a></p><p>本组件未单独提供爬虫，须结合爬虫使用（推荐crawlergo）。</p><h2 id="0x02-核心逻辑"><a href="#0x02-核心逻辑" class="headerlink" title="0x02 核心逻辑"></a><strong>0x02 核心逻辑</strong></h2><ol><li><p>解析js路径，检查query所有key是否满足正则 (?m)(?i)(callback)|(jsonp)|(^cb$)|(function)</p></li><li><p>referer配置为同域，请求js获取响应</p></li><li><p>js响应生成AST，如果满足</p><p>a) Callee.Name == callback函数名</p><p>b) 递归遍历AST 获取所有的字段和对应的value</p><p>c) 字段为敏感字段（满足正则(?m)(?i)(uid)|(userid)|(user_id)|(nin)|(name)|(username)|(nick)），且value不为空</p></li><li><p>替换Referer后再请求一次，重新验证步骤3</p></li></ol><h2 id="0x03-调用方式"><a href="#0x03-调用方式" class="headerlink" title="0x03 调用方式"></a><strong>0x03 调用方式</strong></h2><p>提供了一个jsonp的漏洞环境，如需自取。</p><p>入参：js uri</p><p>返回：是否存在漏洞，err</p><p>例：</p><pre><code>result, err := CheckSenseJsonp(&quot;http://127.0.0.1/jsonp_env/getUser.php?id=1&amp;jsoncallback=callbackFunction&quot;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jsonp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给Blog换个皮肤</title>
    <link href="/2020/06/29/%E7%BB%99Blog%E6%8D%A2%E4%B8%AA%E7%9A%AE%E8%82%A4/"/>
    <url>/2020/06/29/%E7%BB%99Blog%E6%8D%A2%E4%B8%AA%E7%9A%AE%E8%82%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="给Blog换个皮肤"><a href="#给Blog换个皮肤" class="headerlink" title="给Blog换个皮肤"></a>给Blog换个皮肤</h1><h2 id="0x01-碎碎念"><a href="#0x01-碎碎念" class="headerlink" title="0x01 碎碎念"></a>0x01 碎碎念</h2><p>大壮突然想没事写点东西，让我给搭建个blog。</p><p>这么简单的需求，心想直接hexo+github Page就搞定了。奈何hexo自带的主题越看越丑，所以在github上搜一搜，发现 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid主题</a> 还挺帅的，就折腾了俩小时，这里简单记录下。</p><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>hexo的安装方式已经一搜一大堆了，类似 <a href="https://zhuanlan.zhihu.com/p/26625249">这种</a> 。</p><p>简单来说，基于Node环境</p><pre><code class="hljs shell">npm install -g hexo-clinpm install -g hexo</code></pre><p>新建一个文件夹，用于保存blog项目，切换到该文件夹</p><pre><code class="hljs shell">hexo initnpm install</code></pre><p>安装fluid主题</p><pre><code class="hljs shell">npm install --save hexo-theme-fluid// 引入本地文件的插件npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>下载一份 [配置文件] (<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)%EF%BC%8C%E5%91%BD%E5%90%8D%E4%B8%BA_config.fluid.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)，命名为_config.fluid.yml</a></p><p>此时的目录结构为</p><p><img src="/Users/lucifer/things/blog/source/img/image-20201129154818646.png" alt="image-20201129154818646"></p><p>依据教程修改配置即可。</p><h2 id="0x03-我的配置"><a href="#0x03-我的配置" class="headerlink" title="0x03 我的配置"></a>0x03 我的配置</h2><p>背景图片</p><p><a href="https://initiate.alphacoders.com/download/wallpaper/195750/images2/jpg/134957382403500">图片</a></p><p>_config.fluid.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># Hexo Theme Fluid</span><span class="hljs-comment"># Author: Fluid-dev</span><span class="hljs-comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><span class="hljs-comment">#</span><span class="hljs-comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><span class="hljs-comment">#</span><span class="hljs-comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><span class="hljs-comment"># You can get more detailed help from the guide</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 全局</span><span class="hljs-comment"># Global</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 用于浏览器标签的图标</span><span class="hljs-comment"># Icon for browser tab</span><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/avatar.png</span><span class="hljs-comment"># 用于苹果设备的图标</span><span class="hljs-comment"># Icon for Apple touch</span><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/avatar.png</span><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><span class="hljs-attr">title_join_string:</span> <span class="hljs-string">&quot; - &quot;</span><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># 代码块的增强配置</span><span class="hljs-comment"># Enhancements to code blocks</span><span class="hljs-attr">code:</span>  <span class="hljs-comment"># 是否开启复制代码的按钮</span>  <span class="hljs-comment"># Enable copy code button</span>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 代码高亮</span>  <span class="hljs-comment"># Code highlight</span>  <span class="hljs-attr">highlight:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span>    <span class="hljs-comment"># Highlight library</span>    <span class="hljs-comment"># Options: highlightjs | prismjs</span>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span>    <span class="hljs-attr">highlightjs:</span>      <span class="hljs-comment"># 在链接中挑选 style 填入</span>      <span class="hljs-comment"># Select a style in the link</span>      <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;Github Gist&quot;</span>      <span class="hljs-comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span>      <span class="hljs-comment"># If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)</span>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">prismjs:</span>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span>      <span class="hljs-comment"># See: https://prismjs.com/</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 一些好玩的功能</span><span class="hljs-comment"># Some fun features</span><span class="hljs-attr">fun_features:</span>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span>  <span class="hljs-comment"># Typing animation for subtitle</span>  <span class="hljs-attr">typing:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 打印速度，数字越大越慢</span>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span>    <span class="hljs-comment"># 游标字符</span>    <span class="hljs-comment"># Cursor character</span>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span>    <span class="hljs-comment"># 是否循环播放效果</span>    <span class="hljs-comment"># If true, loop animation</span>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span>  <span class="hljs-attr">anchorjs:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span>    <span class="hljs-comment"># Options: hover | always | touch</span>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span>    <span class="hljs-comment"># Option：§ | # | ❡</span>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 加载进度条</span>  <span class="hljs-comment"># Progress bar when loading</span>  <span class="hljs-attr">progressbar:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span>    <span class="hljs-comment"># See: https://github.com/rstacruz/nprogress</span>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">200</span> &#125;<span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><span class="hljs-attr">dark_mode:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span>  <span class="hljs-comment"># Options: auto | light | dark</span>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><span class="hljs-comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><span class="hljs-attr">color:</span>  <span class="hljs-comment"># body 背景色</span>  <span class="hljs-comment"># Color of body background</span>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span>  <span class="hljs-comment"># Color in dark mode, the same below</span>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span>  <span class="hljs-comment"># 顶部菜单背景色</span>  <span class="hljs-comment"># Color of navigation bar background</span>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span>  <span class="hljs-comment"># 顶部菜单字体色</span>  <span class="hljs-comment"># Color of navigation bar text</span>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span>  <span class="hljs-comment"># 全局字体色</span>  <span class="hljs-comment"># Color of global text</span>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span>  <span class="hljs-comment"># 文章正文字体色</span>  <span class="hljs-comment"># Color of post text</span>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 文章超链接字体色</span>  <span class="hljs-comment"># Color of post link</span>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span>  <span class="hljs-comment"># 超链接悬浮时字体色</span>  <span class="hljs-comment"># Color of link when hovering</span>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span>  <span class="hljs-comment"># 超链接悬浮背景色</span>  <span class="hljs-comment"># Color of link background when hovering</span>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span>  <span class="hljs-comment"># 主面板背景色</span>  <span class="hljs-comment"># Color of main board</span>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><span class="hljs-comment"># 主题字体配置</span><span class="hljs-comment"># Font</span><span class="hljs-attr">font:</span>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span>  <span class="hljs-attr">font_family:</span>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><span class="hljs-attr">custom_js:</span><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><span class="hljs-comment"># The usage is the same as custom_js</span><span class="hljs-attr">custom_css:</span><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突</span><span class="hljs-comment"># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`</span><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># 网页访问统计</span><span class="hljs-comment"># Analysis of website visitors</span><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span>  <span class="hljs-attr">baidu:</span>  <span class="hljs-comment"># Google 统计的 Tracking ID</span>  <span class="hljs-comment"># Google analytics, set Tracking ID</span>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span>  <span class="hljs-attr">google:</span>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span>  <span class="hljs-attr">gtag:</span>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span>  <span class="hljs-comment"># Tencent analytics, set APP ID</span>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span>  <span class="hljs-attr">tencent:</span>    <span class="hljs-attr">sid:</span>    <span class="hljs-attr">cid:</span>  <span class="hljs-comment"># 51.la 站点统计 ID</span>  <span class="hljs-comment"># 51.la analytics</span>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span>  <span class="hljs-comment"># cnzz analytics</span>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span>  <span class="hljs-attr">cnzz:</span>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span>  <span class="hljs-attr">leancloud:</span>    <span class="hljs-attr">app_id:</span>    <span class="hljs-attr">app_key:</span>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span>    <span class="hljs-attr">server_url:</span><span class="hljs-comment"># 对页面中的图片进行懒加载处理，可见范围外的图片不会加载</span><span class="hljs-comment"># Lazy loading of images on the page</span><span class="hljs-attr">lazyload:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 懒加载仅对文章页生效，开启后如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># 主题版本相关</span><span class="hljs-comment"># Theme version</span><span class="hljs-attr">version:</span>  <span class="hljs-comment"># 每次生成页面后，检测主题是否为最新版本</span>  <span class="hljs-comment"># If true, check whether Fluid is the latest version after hexo generate</span>  <span class="hljs-attr">check:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 页头</span><span class="hljs-comment"># Header</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">navbar:</span>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;jweny`s Blog | Security &amp; Develop&quot;</span>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span>  <span class="hljs-attr">ground_glass:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span>    <span class="hljs-comment"># available: 0 - 1.0</span>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><span class="hljs-comment"># 搜索栏，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><span class="hljs-comment"># Search bar, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><span class="hljs-attr">search:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span>  <span class="hljs-comment"># 搜索的范围</span>  <span class="hljs-comment"># Search field</span>  <span class="hljs-comment"># Options: post | page | all</span>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># 搜索是否扫描正文</span>  <span class="hljs-comment"># If true, search will scan the post content</span>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 向下滚动的箭头</span><span class="hljs-comment"># Scroll down arrow</span><span class="hljs-attr">scroll_down_arrow:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">90</span>  <span class="hljs-comment"># 翻页后自动滚动</span>  <span class="hljs-comment"># Auto scroll after page turning</span>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 向顶部滚动的箭头</span><span class="hljs-comment"># Scroll top arrow</span><span class="hljs-attr">scroll_top_arrow:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 头图滚动视差</span><span class="hljs-comment"># Banner image scrolling parallax</span><span class="hljs-attr">banner_parallax:</span> <span class="hljs-literal">true</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 页脚</span><span class="hljs-comment"># Footer</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">footer:</span>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;a href=&quot;https://github.com/jweny&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Copyright © 2017 ~ 2020 jweny</span><span class="hljs-string">&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">    &#x27;</span>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span>  <span class="hljs-comment"># Display website PV and UV statistics</span>  <span class="hljs-attr">statistics:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 统计数据来源，如果使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；如果使用 busuanzi 可能会有请求失败的情况</span>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span>    <span class="hljs-comment"># Options: busuanzi | leancloud</span>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>    <span class="hljs-comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>    <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span>  <span class="hljs-attr">beian:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># ICP证号</span>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 首页</span><span class="hljs-comment"># Home Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">index:</span>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-comment"># 头图高度，屏幕百分比</span>  <span class="hljs-comment"># Height ratio of banner image</span>  <span class="hljs-comment"># Available: 0 - 100</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span>  <span class="hljs-comment"># Available: 0 - 1.0</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 默认的文章封面图，当没有指定 index_img 时会使用该图片，若都为空则不显示任何图片</span>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If empty, no image will be displayed</span>  <span class="hljs-attr">post_default_img:</span>  <span class="hljs-comment"># 首页副标题的独立设置</span>  <span class="hljs-comment"># Independent config of home page subtitle</span>  <span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;一个记录jweny成长的信息安全博客&quot;</span>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>    <span class="hljs-attr">api:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 请求地址</span>      <span class="hljs-comment"># Request url</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-comment"># 请求方法</span>      <span class="hljs-comment"># Request method</span>      <span class="hljs-comment"># Available: GET | POST | PUT</span>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span>      <span class="hljs-comment"># 请求头</span>      <span class="hljs-comment"># Request headers</span>      <span class="hljs-attr">headers:</span> &#123;&#125;      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>      <span class="hljs-attr">keys:</span> []  <span class="hljs-comment"># 自动截取文章摘要</span>  <span class="hljs-comment"># Auto extract post</span>  <span class="hljs-attr">auto_excerpt:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 打开文章的标签方式</span>  <span class="hljs-comment"># The browser tag to open the post</span>  <span class="hljs-comment"># Available: _blank | _self</span>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span>  <span class="hljs-comment"># Meta information of post</span>  <span class="hljs-attr">post_meta:</span>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span>  <span class="hljs-attr">post_sticky:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><span class="hljs-comment"># Custom Page through `hexo new page`</span><span class="hljs-attr">page:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 文章页</span><span class="hljs-comment"># Post Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">post:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 文章标题下方的元信息</span>  <span class="hljs-comment"># Meta information below title</span>  <span class="hljs-attr">meta:</span>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span>    <span class="hljs-attr">author:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span>    <span class="hljs-attr">date:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span>      <span class="hljs-comment"># ISO-8601 date format</span>      <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span>    <span class="hljs-comment"># 字数统计</span>    <span class="hljs-comment"># Word count</span>    <span class="hljs-attr">wordcount:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span>      <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>    <span class="hljs-comment"># 估计阅读全文需要的时长</span>    <span class="hljs-comment"># Estimate the time required to read the full text</span>    <span class="hljs-attr">min2read:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span>      <span class="hljs-comment"># 每分钟阅读多少字，如果是技术文章，建议降低</span>      <span class="hljs-comment"># Words read per minute</span>      <span class="hljs-attr">words:</span> <span class="hljs-number">100</span>    <span class="hljs-comment"># 浏览量计数</span>    <span class="hljs-comment"># Number of visits</span>    <span class="hljs-attr">views:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 统计数据来源</span>      <span class="hljs-comment"># Data Source</span>      <span class="hljs-comment"># Options: busuanzi | leancloud</span>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span>  <span class="hljs-attr">updated:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 描述文字</span>    <span class="hljs-comment"># Descriptive text before date</span>    <span class="hljs-attr">content:</span> <span class="hljs-string">本文最后更新于：</span>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 文章右侧目录</span>  <span class="hljs-comment"># Table of contents</span>  <span class="hljs-attr">toc:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 版权声明</span>  <span class="hljs-comment"># Copyright</span>  <span class="hljs-attr">copyright:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;本博客所有文章除特别声明外，转载请注明出处，侵权必究！&#x27;</span>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span>  <span class="hljs-comment"># Link to previous/next post</span>  <span class="hljs-attr">prev_next:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容</span>  <span class="hljs-comment"># Custom content at the bottom of the post page (located above the footer)</span>  <span class="hljs-attr">custom:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;img src=&quot;https://octodex.github.com/images/jetpacktocat.png&quot; class=&quot;rounded mx-auto d-block mt-5&quot; style=&quot;width:150px; height:150px;&quot;&gt;&#x27;</span>  <span class="hljs-comment"># 文章图片可点击放大</span>  <span class="hljs-comment"># Zoom feature of images</span>  <span class="hljs-attr">image_zoom:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span>  <span class="hljs-attr">footnote:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span>  <span class="hljs-attr">math:</span>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Options: mathjax | katex</span>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span>  <span class="hljs-comment"># 流程图，基于 mermaid-js</span>  <span class="hljs-comment"># Flow chart, based on mermaid-js</span>  <span class="hljs-attr">mermaid:</span>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;  <span class="hljs-comment"># 评论插件</span>  <span class="hljs-comment"># Comment plugin</span>  <span class="hljs-attr">comments:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Options: disqus | valine | gitalk | utterances | changyan | livere | remark42 | twikoo</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 评论插件</span><span class="hljs-comment"># Comment plugins</span><span class="hljs-comment">#</span><span class="hljs-comment"># 开启评论需要先在上方 `post: comments: enable: true`</span><span class="hljs-comment"># Enable comments need to be above `post: comments: enable: true`</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># Utterances</span><span class="hljs-comment"># 基于 GitHub Issues</span><span class="hljs-comment"># Based on GitHub Issues</span><span class="hljs-comment"># See: https://utteranc.es</span><span class="hljs-attr">utterances:</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><span class="hljs-comment"># Disqus</span><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><span class="hljs-comment"># Third-party based services, it is a very popular</span><span class="hljs-comment"># See: https://disqus.com</span><span class="hljs-attr">disqus:</span>  <span class="hljs-attr">shortname:</span>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span>  <span class="hljs-comment"># See: https://github.com/SukkaW/DisqusJS</span>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">apikey:</span><span class="hljs-comment"># Gitalk</span><span class="hljs-comment"># 基于 GitHub Issues</span><span class="hljs-comment"># Based on GitHub Issues</span><span class="hljs-comment"># See: https://github.com/gitalk/gitalk#options</span><span class="hljs-attr">gitalk:</span>  <span class="hljs-attr">clientID:</span>  <span class="hljs-attr">clientSecret:</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">owner:</span>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Valine</span><span class="hljs-comment"># 基于 LeanCloud</span><span class="hljs-comment"># Based on LeanCloud</span><span class="hljs-comment"># See: https://valine.js.org/configuration.html</span><span class="hljs-attr">valine:</span>  <span class="hljs-attr">appid:</span>  <span class="hljs-attr">appkey:</span>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">serverURLs:</span><span class="hljs-comment"># 畅言 Changyan</span><span class="hljs-comment"># 基于第三方的服务</span><span class="hljs-comment"># Third-party based services, insufficient support for regions outside China</span><span class="hljs-comment"># http://changyan.kuaizhan.com</span><span class="hljs-attr">changyan:</span>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># 来必力 Livere</span><span class="hljs-comment"># 基于第三方的服务</span><span class="hljs-comment"># Third-party based services</span><span class="hljs-comment"># See: https://www.livere.com</span><span class="hljs-attr">livere:</span>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># Remark42</span><span class="hljs-comment"># 需要自己运行后端服务</span><span class="hljs-comment"># Need to run the backend service yourself</span><span class="hljs-comment"># See: https://remark42.com</span><span class="hljs-attr">remark42:</span>  <span class="hljs-attr">host:</span>  <span class="hljs-attr">site_id:</span>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span><span class="hljs-comment"># twikoo</span><span class="hljs-comment"># 基于腾讯云开发</span><span class="hljs-comment"># Based on Tencent CloudBase</span><span class="hljs-comment"># See: https://twikoo.js.org</span><span class="hljs-attr">twikoo:</span>  <span class="hljs-attr">env_id:</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 归档页</span><span class="hljs-comment"># Archive Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">archive:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">时间轴</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 分类页</span><span class="hljs-comment"># Category Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">category:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More</span>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More</span>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span>  <span class="hljs-comment"># 排序字段，前面带减号是倒序，不带减号是正序，可选项：name | length</span>  <span class="hljs-comment"># Sort field, with a minus sign is reverse order</span>  <span class="hljs-comment"># Options: name | length</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 标签页</span><span class="hljs-comment"># Tag Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">tag:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span>  <span class="hljs-attr">tagcloud:</span>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 关于页</span><span class="hljs-comment"># About Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">about:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span>  <span class="hljs-string">关于我</span> <span class="hljs-comment"># 打字机内容</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">jweny</span>  <span class="hljs-attr">introduce:</span> <span class="hljs-string">&quot;jweny@360云安全&quot;</span>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span>  <span class="hljs-attr">icons:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/jweny&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/wechat.jpeg&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont ico&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/wechat.jpeg&quot;</span> &#125;<span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 404页</span><span class="hljs-comment"># 404 Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">page404:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">&quot;Page not found&quot;</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 友链页</span><span class="hljs-comment"># Links Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">links:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/back.jpg</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">30</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">subtitle:</span>  <span class="hljs-comment"># 友链的成员项</span>  <span class="hljs-comment"># Member item of page</span>  <span class="hljs-attr">items:</span>    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span>,      <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,      <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,      <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;<span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 以下是配置 JS CSS 静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><span class="hljs-comment"># 默认的 staticfile CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><span class="hljs-comment"># 在站点上启用 https 时，请使用 CDN 地址的 https 协议，</span><span class="hljs-comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><span class="hljs-comment">#</span><span class="hljs-comment"># Here is the url prefix to configure JS and CSS static assets. Set CDN addresses you want to customize.</span><span class="hljs-comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><span class="hljs-comment"># Use the https protocol of CDN url when you enable https on your site.</span><span class="hljs-comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">static_prefix:</span>  <span class="hljs-comment"># 内部静态</span>  <span class="hljs-comment"># Internal static</span>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span>  <span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span>  <span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span>  <span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_kmeydafke9r.css</span>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">https://cdn.staticfile.org/anchor-js/4.3.0/</span>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">https://cdn.staticfile.org/github-markdown-css/4.0.0/</span>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">https://cdn.staticfile.org/jquery/3.5.1/</span>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">https://cdn.staticfile.org/twitter-bootstrap/4.5.3/</span>  <span class="hljs-attr">highlightjs:</span> <span class="hljs-string">https://cdn.staticfile.org/highlight.js/10.1.2/</span>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">https://cdn.staticfile.org/prism/1.22.0/</span>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">https://cdn.staticfile.org/tocbot/4.12.0/</span>  <span class="hljs-attr">typed:</span> <span class="hljs-string">https://cdn.staticfile.org/typed.js/2.0.11/</span>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">https://cdn.staticfile.org/fancybox/3.5.7/</span>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">https://cdn.staticfile.org/nprogress/0.2.0/</span>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://cdn.staticfile.org/mathjax/3.1.2/es5/</span>  <span class="hljs-attr">katex:</span> <span class="hljs-string">https://cdn.staticfile.org/KaTeX/0.12.0/</span>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">https://busuanzi.ibruce.info/busuanzi/2.3/</span>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">https://cdn.staticfile.org/clipboard.js/2.0.6/</span>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">https://cdn.staticfile.org/mermaid/8.8.2/</span>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://cdn.staticfile.org/valine/1.4.14/</span>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">https://cdn.staticfile.org/gitalk/1.7.0/</span>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/</span>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/twikoo@0.1.15/dist/</span>  <span class="hljs-attr">hint:</span> <span class="hljs-string">/lib/hint/</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
